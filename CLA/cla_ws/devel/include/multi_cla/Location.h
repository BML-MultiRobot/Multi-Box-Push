// Generated by gencpp from file multi_cla/Location.msg
// DO NOT EDIT!


#ifndef MULTI_CLA_MESSAGE_LOCATION_H
#define MULTI_CLA_MESSAGE_LOCATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace multi_cla
{
template <class ContainerAllocator>
struct Location_
{
  typedef Location_<ContainerAllocator> Type;

  Location_()
    : x_global(0.0)
    , y_global(0.0)  {
    }
  Location_(const ContainerAllocator& _alloc)
    : x_global(0.0)
    , y_global(0.0)  {
  (void)_alloc;
    }



   typedef float _x_global_type;
  _x_global_type x_global;

   typedef float _y_global_type;
  _y_global_type y_global;





  typedef boost::shared_ptr< ::multi_cla::Location_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multi_cla::Location_<ContainerAllocator> const> ConstPtr;

}; // struct Location_

typedef ::multi_cla::Location_<std::allocator<void> > Location;

typedef boost::shared_ptr< ::multi_cla::Location > LocationPtr;
typedef boost::shared_ptr< ::multi_cla::Location const> LocationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::multi_cla::Location_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::multi_cla::Location_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::multi_cla::Location_<ContainerAllocator1> & lhs, const ::multi_cla::Location_<ContainerAllocator2> & rhs)
{
  return lhs.x_global == rhs.x_global &&
    lhs.y_global == rhs.y_global;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::multi_cla::Location_<ContainerAllocator1> & lhs, const ::multi_cla::Location_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace multi_cla

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::multi_cla::Location_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multi_cla::Location_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multi_cla::Location_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multi_cla::Location_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multi_cla::Location_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multi_cla::Location_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::multi_cla::Location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7786b133d00488af6ca566640ecc3e11";
  }

  static const char* value(const ::multi_cla::Location_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7786b133d00488afULL;
  static const uint64_t static_value2 = 0x6ca566640ecc3e11ULL;
};

template<class ContainerAllocator>
struct DataType< ::multi_cla::Location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "multi_cla/Location";
  }

  static const char* value(const ::multi_cla::Location_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::multi_cla::Location_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x_global\n"
"float32 y_global\n"
;
  }

  static const char* value(const ::multi_cla::Location_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::multi_cla::Location_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_global);
      stream.next(m.y_global);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Location_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multi_cla::Location_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::multi_cla::Location_<ContainerAllocator>& v)
  {
    s << indent << "x_global: ";
    Printer<float>::stream(s, indent + "  ", v.x_global);
    s << indent << "y_global: ";
    Printer<float>::stream(s, indent + "  ", v.y_global);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MULTI_CLA_MESSAGE_LOCATION_H
